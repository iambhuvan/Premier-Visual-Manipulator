# USEME

# USEME: Image Manipulation and Enhancement (Assignment 6)

Overview
This project is an advanced Image Manipulation and Enhancement (IME) application that provides robust functionality for image processing. With this iteration, the application incorporates a Graphical User Interface (GUI) built using Java Swing, adding interactivity and usability for users. The application now supports three operational modes:

Command-Line Interface (CLI): For interactive command execution.
Batch Script Execution: For automating image operations through scripts.
Graphical User Interface (GUI): For real-time image manipulation and visualization.

The application adheres to the Model-View-Controller (MVC) architecture, ensuring clear separation of concerns and ease of future enhancements. It supports the following image formats: JPEG, PNG, and PPM.

# Features

Core Features (From Assignments 4, 5, and 6)
Load and save images in JPEG, PNG, and PPM formats.
Visualize individual RGB channels (red, green, and blue).
Visualize grayscale components (value, intensity, and luma).
Perform basic image operations:
Horizontal and vertical flips.
Brighten or darken an image.
Apply advanced filters:
Blur and sharpen.
Convert to sepia tone.
Convert to grayscale.
Split RGB channels into separate images and combine them back into one.
Generate a histogram of red, green, and blue components for an image.
Perform color correction and levels adjustment (shadows, midtones, highlights).
Compress an image using lossy compression with configurable compression ratios.
View a split preview of processed and original images simultaneously.
Downscale an image to a specific resolution.

# New Features in Assignment 6

Graphical User Interface (GUI):
Built using Java Swing.
Interactive buttons, sliders, and menus for image manipulation.
Real-time histogram updates for visible images.
Scrollable view for large images.
Toggle between full image and split view with adjustable percentages.
Error messages displayed as pop-ups for invalid operations or file paths.

Downscaling:
Resize an image to specific dimensions while maintaining proportionality.

Partial Image Manipulation:
On Operations such as blur, sharpen, greyscale, sepia, component visualizations

Command-Line Interface (CLI): For interactive command execution.
Batch Script Execution: For automating image operations through scripts.
Graphical User Interface (GUI): For real-time image manipulation and visualization.
The application adheres to the Model-View-Controller (MVC) architecture, ensuring clear separation of concerns and ease of future enhancements. It supports the following image formats: JPEG, PNG, and PPM.

Features
Core Features (From Assignments 4, 5, and 6)
Load and save images in JPEG, PNG, and PPM formats.
Visualize individual RGB channels (red, green, and blue).
Visualize grayscale components (value, intensity, and luma).
Perform basic image operations:
Horizontal and vertical flips.
Brighten or darken an image.
Apply advanced filters:
Blur and sharpen.
Convert to sepia tone.
Convert to grayscale.
Split RGB channels into separate images and combine them back into one.
Generate a histogram of red, green, and blue components for an image.
Perform color correction and levels adjustment (shadows, midtones, highlights).
Compress an image using lossy compression with configurable compression ratios.
View a split preview of processed and original images simultaneously.
Downscale an image to a specific resolution.

New Features in Assignment 6

Graphical User Interface (GUI):
Built using Java Swing.
Interactive buttons, sliders, and menus for image manipulation.
Real-time histogram updates for visible images.
Scrollable view for large images.
Toggle between full image and split view with adjustable percentages.
Error messages displayed as pop-ups for invalid operations or file paths.
Downscaling:
Resize an image to specific dimensions while maintaining proportionality.
Enhanced Split View:
Split view available for operations like blur, sharpen, sepia, and grayscale.
Adjustable split percentage for better visual comparison.
PartialImageManipulation for ImageMasking  for operations such as blur,sharpen,greyscale,sepia,component visualizations.

# Supported Commands

Here is the list of all accepted commands across CLI and Batch Scripting modes:

# Basic Commands

load <image-path> <image-name>: Load an image from the specified path.
save <image-path> <image-name>: Save an image to the specified path.
Channel Visualization
red-component <image-name> <dest-image-name>: Create an image with the red component.
green-component <image-name> <dest-image-name>: Create an image with the green component.
blue-component <image-name> <dest-image-name>: Create an image with the blue component.
Brightness and Grayscale Components
value-component <image-name> <dest-image-name>: Create an image based on the value component.
intensity-component <image-name> <dest-image-name>: Create an image based on the intensity component.
luma-component <image-name> <dest-image-name>: Create an image based on the luma component.
brighten <increment> <image-name> <dest-image-name>: Brighten or darken an image by the given increment.
Filters and Color Transformations
blur <image-name> <dest-image-name>: Apply a blur filter.
sharpen <image-name> <dest-image-name>: Apply a sharpen filter.
sepia <image-name> <dest-image-name>: Convert an image to sepia tone.
greyscale <image-name> <dest-image-name>: Convert an image to greyscale.
Advanced Features
rgb-split <image-name> <red-image-name> <green-image-name> <blue-image-name>: Split the RGB channels into separate images.
rgb-combine <dest-image-name> <red-image-name> <green-image-name> <blue-image-name>: Combine red, green, and blue images into one.
compress <compression-ratio> <image-name> <dest-image-name>: Compress an image with the given ratio.
generate-histogram <image-name> <dest-image-name>: Generate a histogram for the image.
color-correct <image-name> <dest-image-name>: Perform color correction on the image.
levels-adjust <black> <mid> <white> <image-name> <dest-image-name>: Adjust levels of black, midtones, and white.
Split View Commands
split-view <image-name> <dest-image-name> <percentage>: Create a split-view image.
blur <image-name> <dest-image-name> split <percentage>: Apply a blur filter with split view.
sharpen <image-name> <dest-image-name> split <percentage>: Apply a sharpen filter with split view.
sepia <image-name> <dest-image-name> split <percentage>: Convert to sepia tones with split view.
greyscale <image-name> <dest-image-name> split <percentage>: Convert to greyscale with split view.
color-correct <image-name> <dest-image-name> split <percentage>: Perform color correction with split view.
levels-adjust <black> <mid> <white> <image-name> <dest-image-name> split <percentage>: Adjust levels with split view.
Downscaling
downscale <width> <height> <image-name> <dest-image-name>: Downscale an image to specific dimensions.
Script Execution
run <script-file>: Execute all commands from a script file.
exit: Save all images to the ResultImages folder and exit.


# Supported Commands through my script

# Load Operations
# Loads the primary image for processing
load TestImages/TestImage1JPG.jpg TestImage1
# Loads the mask image for partial operations
load TestImages/TestImage1-mask.jpg TestImage1-mask

# Basic Component Operations
# Extracts the red channel from the image
red-component TestImage1 TestImage1-red
save ResultImages/TestImage1-red.jpg TestImage1-red

# Extracts the green channel from the image
green-component TestImage1 TestImage1-green
save ResultImages/TestImage1-green.jpg TestImage1-green

# Extracts the blue channel from the image
blue-component TestImage1 TestImage1-blue
save ResultImages/TestImage1-blue.jpg TestImage1-blue

# Extracts maximum RGB value for each pixel
value-component TestImage1 TestImage1-value
save ResultImages/TestImage1-value.jpg TestImage1-value

# Calculates average of RGB channels
intensity-component TestImage1 TestImage1-intensity
save ResultImages/TestImage1-intensity.jpg TestImage1-intensity

# Applies weighted sum of RGB channels for perceived brightness
luma-component TestImage1 TestImage1-luma
save ResultImages/TestImage1-luma.jpg TestImage1-luma

# Image Transformations
# Mirrors the image horizontally
horizontal-flip TestImage1 TestImage1-horizontal
save ResultImages/TestImage1-horizontal.jpg TestImage1-horizontal

# Mirrors the image vertically
vertical-flip TestImage1 TestImage1-vertical
save ResultImages/TestImage1-vertical.jpg TestImage1-vertical

# Brightness Adjustments
# Increases brightness by 20 units
brighten 20 TestImage1 TestImage1-bright
save ResultImages/TestImage1-bright.jpg TestImage1-bright

# Decreases brightness by 20 units
brighten -20 TestImage1 TestImage1-dark
save ResultImages/TestImage1-dark.jpg TestImage1-dark

# RGB Operations
# Separates image into individual RGB channels
rgb-split TestImage1 TestImage1-split-red TestImage1-split-green TestImage1-split-blue
save ResultImages/TestImage1-split-red.jpg TestImage1-split-red
save ResultImages/TestImage1-split-green.jpg TestImage1-split-green
save ResultImages/TestImage1-split-blue.jpg TestImage1-split-blue

# Combines separate RGB channels into one image
rgb-combine CombinedImage TestImage1-split-red TestImage1-split-green TestImage1-split-blue
save ResultImages/CombinedImage.jpg CombinedImage

# Filter Effects
# Applies Gaussian blur for image softening
blur TestImage1 TestImage1-blurred
save ResultImages/TestImage1-blurred.jpg TestImage1-blurred

# Enhances edge details and sharpness
sharpen TestImage1 TestImage1-sharpened
save ResultImages/TestImage1-sharpened.jpg TestImage1-sharpened

# Color Transformations
# Applies sepia tone effect for vintage appearance
sepia TestImage1 TestImage1-sepia
save ResultImages/TestImage1-sepia.jpg TestImage1-sepia

# Converts image to greyscale using luma values
greyscale TestImage1 TestImage1-greyscale
save ResultImages/TestImage1-greyscale.jpg TestImage1-greyscale

# Compression and Histogram Operations
# Compresses image to 20% of original quality
compress 20 TestImage1 TestImage1-compressed20
save ResultImages/TestImage1-compressed20.jpg TestImage1-compressed20
# Creates histogram for 20% compressed image
histogram TestImage1-compressed20 TestImage1-compressed20-histogram
save ResultImages/20-histogram.jpg TestImage1-compressed20-histogram

# Compresses image to 50% of original quality
compress 50 TestImage1 TestImage1-compressed50
save ResultImages/TestImage1-compressed50.jpg TestImage1-compressed50
# Creates histogram for 50% compressed image
histogram TestImage1-compressed50 TestImage1-compressed50-histogram
save ResultImages/50-histogram.jpg TestImage1-compressed50-histogram

# Compresses image to 90% of original quality
compress 90 TestImage1 TestImage1-compressed90
save ResultImages/TestImage1-compressed90.jpg TestImage1-compressed90
# Creates histogram for 90% compressed image
histogram TestImage1-compressed90 TestImage1-compressed90-histogram
save ResultImages/90-histogram.jpg TestImage1-compressed90-histogram

# Original Image Histogram
# Generates histogram of the original unmodified image
histogram TestImage1 TestImage1-histogram
save ResultImages/TestImage1-histogram.jpg TestImage1-histogram

# Color Correction and Levels
# Automatically adjusts color balance
color-correct TestImage1 TestImage1-color-corrected
save ResultImages/TestImage1-color-corrected.jpg TestImage1-color-corrected
# Creates histogram for color-corrected image
histogram TestImage1-color-corrected TestImage1-color-corrected-histogram
save ResultImages/color-corrected-histogram.jpg TestImage1-color-corrected-histogram

# Adjusts levels with black point 20, mid point 100, white point 255
levels-adjust 20 100 255 TestImage1 TestImage1-levels-adjusted
save ResultImages/TestImage1-levels-adjusted.jpg TestImage1-levels-adjusted
# Creates histogram for levels-adjusted image
histogram TestImage1-levels-adjusted TestImage1-levels-adjusted-histogram
save ResultImages/levels-adjusted-histogram.jpg TestImage1-levels-adjusted-histogram

# Adjusts levels with different parameters
levels-adjust 50 150 240 TestImage1 TestImage2-levels-adjusted
save ResultImages/TestImage2-levels-adjusted.jpg TestImage2-levels-adjusted
# Creates histogram for second levels adjustment
histogram TestImage2-levels-adjusted TestImage2-levels-adjusted-histogram
save ResultImages/level2-histogram.jpg TestImage2-levels-adjusted-histogram

# Split View Operations
# Shows blur effect with 30% split view
blur TestImage1 TestImage1-blur-split split 30
save ResultImages/TestImage1-blur-split.jpg TestImage1-blur-split
# Creates histogram for split view blur
histogram TestImage1-blur-split TestImage1-blur-split-histogram
save ResultImages/TestImage1-blur-split-histogram.jpg TestImage1-blur-split-histogram

# Shows sharpen effect with 70% split view
sharpen TestImage1 TestImage1-sharpen-split split 70
save ResultImages/TestImage1-sharpen-split.jpg TestImage1-sharpen-split
# Creates histogram for split view sharpen
histogram TestImage1-sharpen-split TestImage1-sharpen-split-histogram
save ResultImages/TestImage1-sharpen-split-histogram.jpg TestImage1-sharpen-split-histogram

# Shows sepia effect with 30% split view
sepia TestImage1 TestImage1-sepia-split split 30
save ResultImages/TestImage1-sepia-split.jpg TestImage1-sepia-split
# Creates histogram for split view sepia
histogram TestImage1-sepia-split TestImage1-sepia-split-histogram
save ResultImages/TestImage1-sepia-split-histogram.jpg TestImage1-sepia-split-histogram

# Shows greyscale effect with 70% split view
greyscale TestImage1 TestImage1-greyscale-split split 70
save ResultImages/TestImage1-greyscale-split.jpg TestImage1-greyscale-split
# Creates histogram for split view greyscale
histogram TestImage1-greyscale-split TestImage1-greyscale-split-histogram
save ResultImages/TestImage1-greyscale-split-histogram.jpg TestImage1-greyscale-split-histogram

# Downscale Operations
# Reduces image size to 300x200 pixels
downscale 300 200 TestImage1 TestImage1-downscale
save ResultImages/TestImage1-downscale.jpg TestImage1-downscale

# Reduces image size to 150x100 pixels
downscale 150 100 TestImage1 TestImage1-downscale-small
save ResultImages/TestImage1-downscale-small.jpg TestImage1-downscale-small

# Partial Mask Operations
# Applies blur effect only to masked regions
partial blur TestImage1 TestImage1-mask TestImage1-partial-blur
save ResultImages/TestImage1-partial-blur.jpg TestImage1-partial-blur

# Applies sharpen effect only to masked regions
partial sharpen TestImage1 TestImage1-mask TestImage1-partial-sharpen
save ResultImages/TestImage1-partial-sharpen.jpg TestImage1-partial-sharpen

# Applies sepia effect only to masked regions
partial sepia TestImage1 TestImage1-mask TestImage1-partial-sepia
save ResultImages/TestImage1-partial-sepia.jpg TestImage1-partial-sepia

# Applies greyscale effect only to masked regions
partial greyscale TestImage1 TestImage1-mask TestImage1-partial-greyscale
save ResultImages/TestImage1-partial-greyscale.jpg TestImage1-partial-greyscale

# Applies color component operations only to masked regions
partial red-component TestImage1 TestImage1-mask TestImage1-partial-red
save ResultImages/TestImage1-partial-red.jpg TestImage1-partial-red

partial green-component TestImage1 TestImage1-mask TestImage1-partial-green
save ResultImages/TestImage1-partial-green.jpg TestImage1-partial-green

partial blue-component TestImage1 TestImage1-mask TestImage1-partial-blue
save ResultImages/TestImage1-partial-blue.jpg TestImage1-partial-blue

partial value-component TestImage1 TestImage1-mask TestImage1-partial-value
save ResultImages/TestImage1-partial-value.jpg TestImage1-partial-value

partial intensity-component TestImage1 TestImage1-mask TestImage1-partial-intensity
save ResultImages/TestImage1-partial-intensity.jpg TestImage1-partial-intensity

partial luma-component TestImage1 TestImage1-mask TestImage1-partial-luma
save ResultImages/TestImage1-partial-luma.jpg TestImage1-partial-luma

Script Execution
run <script-file>: Execute all commands from a script file.
exit: Save all images to the ResultImages folder and exit.

GUI Features
The Graphical User Interface (GUI) includes the following features:

Load and Save Images: Load and save files interactively using dialog boxes.
Real-Time Manipulation: Apply operations like flip, blur, brighten, and see results immediately.
Split-View Preview: Compare processed and original images side-by-side with adjustable split percentages.
Interactive Histogram: View real-time histogram updates for red, green, and blue components.
Error Handling: Receive error messages as pop-ups for invalid file paths or operations.
Downscaling: Resize an image interactively via the GUI.

# Execution Instructions
The application supports three execution modes:

1. Command-Line Interface (CLI)

Run the JAR file:

java -jar Assignment6.jar
Select CLI mode by entering 1 when prompted. Enter commands interactively.

2. Batch Script Execution

Prepare a text file (e.g., commands.txt) with commands:

load /path/to/image.png image1
brighten 50 image1 brightenedImage
save /path/to/output.png brightenedImage

Run the script:

java -jar Assignment6.jar < commands.txt

3. Graphical User Interface (GUI)
Run the JAR file:

java -jar Assignment6.jar

Select GUI mode by entering 2 when prompted. Use the GUI for interactive manipulation.

# Testing and Error Handling

Automated Tests: Use JUnit test cases for the controller and model to verify correctness.
GUI Testing: User interactions are tested manually, as GUI testing is optional.
Error Messages: Errors are displayed via pop-ups in GUI mode and text in CLI mode.
